{"version":3,"sources":["panels/Home.js","panels/Constructor.js","App.js","index.js"],"names":["Home","id","go","setImg","fetchedUser","useState","images","React","useRef","separator","map","image","index","key","style","padding","borderRadius","margin","size","onClick","height","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","Constructor","schema","Image","src","canvasRef","top","setTop","bottom","setBottom","setGenStatus","setMemes","fontH","setFontH","fontС","setFontС","heightCanvas","setHeightCanvas","getFontHeight","font","parent","document","createElement","appendChild","createTextNode","body","cssText","offsetHeight","removeChild","useEffect","imm","getElementById","rotate","width","window","innerWidth","canvas","current","ctx","getContext","clearRect","drawImage","text","fillStyle","lineHeight","maxWidth","marginTop","words","split","countWords","length","line","n","testLine","measureText","marginLeft","fillText","writeTop","writeBottom","writeGroup","toDataURL","generate","left","display","crossOrigin","ref","min","max","value","Number","onChange","selected","backgroundColor","border","status","placeholder","e","target","multiline","Fragment","before","stretched","marginRight","App","activePanel","setActivePanel","img","setUser","popout","setPopout","a","bridge","send","user","subscribe","detail","type","data","schemeAttribute","createAttribute","scheme","attributes","setNamedItem","fetchData","panel","ReactDOM","render"],"mappings":"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","file":"static/js/main.3b94e5bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {PanelHeader, Panel, CardGrid, Card, Group, Button, Input} from \"@vkontakte/vkui\";\r\n\r\nconst Home = ({id, go, fetchedUser, setImg }) => {\r\n    const [images, setImages] = useState([\r\n        'https://sun9-56.userapi.com/baoxdsF_-He5F9NiEG9813iB6jspc3Pr2Vk3nQ/0R1ob9TJK2s.jpg',\r\n        'https://i.imgflip.com/1bij.jpg',\r\n        'https://sun9-34.userapi.com/Jb02ospH0-uzudorTg4yUWXDGg5CDtELMa68nA/XLgm_Xs8kZY.jpg',\r\n        'https://sun9-53.userapi.com/kQoYlGSpvfSLVN4AiaZu4Xsth4wR_44yU6-5xA/-3n8REtiI6A.jpg',\r\n        'https://sun9-10.userapi.com/pQprij-LTwwC7DWNoPI4CGXw3_wS70l6OtUyyg/nYpBF5bKJuY.jpg',\r\n        'https://sun9-46.userapi.com/JnFsdanmKshkCHetGmIN-93e2X4QK0zAhIBYNA/Brq-SJr-kgo.jpg',\r\n        'https://sun9-14.userapi.com/CNBgsxFXMRFS7UPJNyUfxKb_krOhqLrDc3sZtQ/-h_uYiLGLcA.jpg',\r\n        'https://sun9-16.userapi.com/hNxjkGka1jzBZJta9cG7smu0_25NzqR9l_WL9Q/CcS7f61M2GQ.jpg',\r\n        'https://sun9-44.userapi.com/jksvfHftzlSQJVEALaBeloaXc1Nmvaq8J6j6dA/mbG5LDMVkgI.jpg',\r\n        'https://sun9-63.userapi.com/3BcLZYSDoxeRqPtdrRmcTUjibcOdrqJSrhrB1g/gpOCU96uTm8.jpg'\r\n    ])\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState(null)\r\n    const [bottom, setBottom] = useState(null)\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader>\r\n                Мемчик\r\n            </PanelHeader>\r\n            <Group separator=\"hide\">\r\n                <CardGrid>\r\n                    {\r\n                        images.map((image, index)=>{\r\n                            return (\r\n                                <Card\r\n                                    key={index}\r\n                                    style={{padding: 2, borderRadius: 13, margin: 0}}\r\n                                    size=\"s\"\r\n                                    onClick={()=>{\r\n                                        setImg(image);\r\n                                        go('constructor')\r\n                                    }}\r\n                                >\r\n                                    <div style={{\r\n                                        height: 96,\r\n                                        backgroundImage: 'url(' + image + ')',\r\n                                        backgroundSize: 'cover',\r\n                                        backgroundPosition: 'center 35%',\r\n                                        backgroundRepeat: 'no-repeat',\r\n                                        borderRadius: 13\r\n                                    }} />\r\n                                </Card>\r\n                            )\r\n                        })\r\n                    }\r\n                </CardGrid>\r\n            </Group>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {\r\n    PanelHeader, Panel, PanelHeaderBack, Cell\r\n    , Div, Button, Input, FormLayout, Slider, Tabs, TabsItem\r\n} from \"@vkontakte/vkui\";\r\nimport Icon24LogoInstagram from '@vkontakte/icons/dist/24/logo_instagram';\r\nimport Icon24ShareOutline from '@vkontakte/icons/dist/24/share_outline';\r\nimport Icon24Attachments from '@vkontakte/icons/dist/24/attachments';\r\nimport Icon12Fire from '@vkontakte/icons/dist/12/fire';\r\n\r\nconst Constructor = ({id, image, go}) => {\r\n    let schema = new Image()\r\n    schema.src = image\r\n    const [img, setImg] = useState(schema);\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState('')\r\n    const [bottom, setBottom] = useState('')\r\n    const [genStatus, setGenStatus] = useState(false)\r\n    const [memes, setMemes] = useState(image)\r\n    const [fontH, setFontH] = useState(30)\r\n    const [fontС, setFontС] = useState('white')\r\n    const [heightCanvas, setHeightCanvas] = useState(0)\r\n\r\n    useEffect(()=>{\r\n        generate()\r\n    })\r\n\r\n    useEffect(()=>{\r\n        // const canvas = canvasRef.current\r\n        // const ctx = canvas.getContext('2d')\r\n        // let imm = document.getElementById('kart');\r\n        // let rotate = imm.height / imm.width\r\n        // imm.style.width = window.innerWidth\r\n        // imm.style.height = window.innerWidth * rotate\r\n        // console.log(imm)\r\n        // ctx.drawImage(imm, 0, 0)\r\n        //ctx.drawImage(img, 0, 0)\r\n    }, [])\r\n    function writeTop(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.fillStyle = fontС;\r\n        ctx.font = 'bold '+fontH+'px impact';\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let maxWidth = canvas.width;\r\n        let marginTop = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function writeBottom(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        let maxWidth = canvas.width;\r\n        let marginTop;\r\n        ctx.font = 'bold '+fontH+'px impact';\r\n        ctx.measureText(text).width > maxWidth ?\r\n            marginTop = canvas.height - getFontHeight(ctx.font)-10 :\r\n            marginTop = canvas.height - 10\r\n        ctx.fillStyle = fontС;\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function writeGroup() {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.font = '10px Arial';\r\n        ctx.fillStyle = '#FFF';\r\n        let marginTop = canvas.height - 2\r\n        let marginLeft = 0\r\n        ctx.fillText('https://vk.com/gen_memes', marginLeft, marginTop);\r\n    }\r\n    function getFontHeight(font) {\r\n        let parent = document.createElement(\"span\");\r\n        parent.appendChild(document.createTextNode(\"height\"));\r\n        document.body.appendChild(parent);\r\n        parent.style.cssText = \"font: \" + font + \"; white-space: nowrap; display: inline;\";\r\n        let height = parent.offsetHeight;\r\n        document.body.removeChild(parent);\r\n        return height;\r\n    }\r\n    function generate(){\r\n        let imm = document.getElementById('kart');\r\n        let rotate = imm.height / imm.width\r\n        setHeightCanvas(window.innerWidth*rotate)\r\n\r\n        setGenStatus(true)\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.clearRect(0,0,canvas.width,canvas.height)\r\n        imm.style.width = window.innerWidth\r\n        imm.style.height = window.innerWidth * rotate\r\n        ctx.drawImage(imm, 0, 0, window.innerWidth, window.innerWidth * rotate)\r\n        writeTop(top)\r\n        writeBottom(bottom)\r\n        writeGroup()\r\n        setMemes(canvas.toDataURL(\"image/png\"))\r\n    }\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader left={<PanelHeaderBack onClick={()=>go('home')} />}>\r\n                Создание мема\r\n            </PanelHeader>\r\n            <img style={{display: 'none'}} crossOrigin={'anonymous'} id={'kart'} src={image}/>\r\n            {/*<img width={window.innerWidth} height={image.height} src={memes} />*/}\r\n            <canvas\r\n                //style={{display: 'none'}}\r\n                ref={canvasRef}\r\n                width={window.innerWidth}\r\n                height={heightCanvas}\r\n            />\r\n            <FormLayout>\r\n                <Slider\r\n                    min={10}\r\n                    max={100}\r\n                    value={Number(fontH)}\r\n                    onChange={fontH=>setFontH(fontH)}\r\n                    top=\"Размер шрифта\"\r\n                />\r\n                <Tabs>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('white')}\r\n                        selected={fontС === 'white'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'white', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('black')}\r\n                        selected={fontС === 'black'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'black', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('red')}\r\n                        selected={fontС === 'red'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'red', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('blue')}\r\n                        selected={fontС === 'blue'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'blue', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('chocolate')}\r\n                        selected={fontС === 'chocolate'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'chocolate', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                    <TabsItem\r\n                        onClick={()=>setFontС('lightseagreen')}\r\n                        selected={fontС === 'lightseagreen'}\r\n                    >\r\n                        <Div style={{height: 5, width: 5, borderRadius: 50, backgroundColor: 'lightseagreen', border: '2px solid darkslateblue', margin: 'auto'}}/>\r\n                    </TabsItem>\r\n                </Tabs>\r\n                    <Input\r\n                        status={\r\n                            top.length>0 ?\r\n                                top.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={top.length+'/50'}\r\n                        top=\"Текст верхней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={top}\r\n                        onChange={e=>setTop(e.target.value)}/>\r\n                    <Input\r\n                        status={\r\n                            bottom.length>0 ?\r\n                                bottom.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={bottom.length+'/50'}\r\n                        top=\"Текст нижней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={bottom}\r\n                        onChange={e=>setBottom(e.target.value)}/>\r\n                        <Cell multiline>Обратите внимание: для корректного переноса строк между словами обязательно должны быть пробелы.</Cell>\r\n            </FormLayout>\r\n            {\r\n                top !== '' || bottom !== '' ?\r\n                    <React.Fragment>\r\n                        <Div style={{display: 'flex'}}>\r\n                            <Button before={<Icon24ShareOutline/>} size=\"l\" stretched style={{ marginRight: 8 }}>На стену</Button>\r\n                            <Button before={<Icon24LogoInstagram/>} size=\"l\" stretched>В историю</Button>\r\n                        </Div>\r\n                        <Div>\r\n                            <Button before={<Icon24Attachments/>} size=\"xl\">Сохранить в библиотеке</Button>\r\n                        </Div>\r\n                    </React.Fragment> :\r\n                    null\r\n            }\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Constructor;","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home'\nimport Constructor from './panels/Constructor'\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [img, setImg] = useState(null);\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(null); //<ScreenSpinner size='large' />\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = panel => {\n\t\tsetActivePanel(panel);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} setImg={setImg} />\n\t\t\t<Constructor id='constructor' fetchedUser={fetchedUser} go={go} image={img} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}