{"version":3,"sources":["panels/Home.js","panels/Constructor.js","App.js","index.js"],"names":["Home","id","go","setImg","fetchedUser","useState","images","React","useRef","useEffect","fetch","method","then","response","json","console","log","catch","e","separator","map","image","size","onClick","style","height","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","borderRadius","Constructor","schema","Image","src","img","canvasRef","top","setTop","bottom","setBottom","setGenStatus","memes","setMemes","getFontHeight","font","parent","document","createElement","appendChild","createTextNode","body","cssText","offsetHeight","removeChild","canvas","current","ctx","getContext","clearRect","width","imm","getElementById","rotate","window","innerWidth","drawImage","text","fillStyle","lineHeight","maxWidth","marginTop","words","split","countWords","length","line","n","testLine","measureText","marginLeft","fillText","writeTop","writeBottom","toDataURL","generate","left","crossorigin","display","ref","Fragment","before","stretched","marginRight","status","placeholder","value","onChange","target","multiline","App","activePanel","setActivePanel","setUser","popout","setPopout","a","bridge","send","user","subscribe","detail","type","data","schemeAttribute","createAttribute","scheme","attributes","setNamedItem","fetchData","panel","ReactDOM","render"],"mappings":"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","file":"static/js/main.39881895.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {PanelHeader, Panel, CardGrid, Card, Group, Button, Input} from \"@vkontakte/vkui\";\r\n\r\nconst Home = ({id, go, fetchedUser, setImg }) => {\r\n    const [images, setImages] = useState([\r\n        'https://risovach.ru/upload/2019/04/generator/roskoshnyy-vinni-puh_205315570_orig_.png',\r\n        'https://i.imgflip.com/1bij.jpg'\r\n    ])\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState(null)\r\n    const [bottom, setBottom] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        fetch('https://api.imgflip.com/get_memes/', {\r\n            method: 'GET',\r\n\r\n        })\r\n            .then(response=>response.json())\r\n            .then(response=>console.log(response))\r\n            .catch(e=>console.log(e))\r\n    }, [])\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader>\r\n                Мемчик\r\n            </PanelHeader>\r\n            <Group separator=\"hide\">\r\n                <CardGrid>\r\n                    {\r\n                        images.map(image=>{\r\n                            return (\r\n                                <Card\r\n                                    size=\"s\"\r\n                                    onClick={()=>{\r\n                                        setImg(image);\r\n                                        go('constructor')\r\n                                    }}\r\n                                >\r\n                                    <div style={{\r\n                                        height: 96,\r\n                                        backgroundImage: 'url(' + image + ')',\r\n                                        backgroundSize: 'cover',\r\n                                        backgroundPosition: 'center 35%',\r\n                                        backgroundRepeat: 'no-repeat',\r\n                                        borderRadius: 13\r\n                                    }} />\r\n                                </Card>\r\n                            )\r\n                        })\r\n                    }\r\n                </CardGrid>\r\n            </Group>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {PanelHeader, Panel, PanelHeaderBack, Cell\r\n    , Div, Button, Input, FormLayout} from \"@vkontakte/vkui\";\r\nimport Icon24LogoInstagram from '@vkontakte/icons/dist/24/logo_instagram';\r\nimport Icon24ShareOutline from '@vkontakte/icons/dist/24/share_outline';\r\nimport Icon24Attachments from '@vkontakte/icons/dist/24/attachments';\r\n\r\nconst Constructor = ({id, image, go}) => {\r\n    let schema = new Image()\r\n    schema.src = image\r\n    const [img, setImg] = useState(schema);\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState('')\r\n    const [bottom, setBottom] = useState('')\r\n    const [genStatus, setGenStatus] = useState(false)\r\n    const [memes, setMemes] = useState(image)\r\n\r\n    useEffect(()=>{\r\n        generate()\r\n    })\r\n\r\n    useEffect(()=>{\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        let imm = document.getElementById('kart');\r\n        let rotate = imm.height / imm.width\r\n        imm.width = window.innerWidth\r\n        imm.height = window.innerWidth * rotate\r\n        ctx.drawImage(imm, 0, 0)\r\n        //ctx.drawImage(img, 0, 0)\r\n    }, [])\r\n    function writeTop(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.fillStyle = \"#FFF\";\r\n        ctx.font = 'bold 30px impact';\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let maxWidth = canvas.width;\r\n        let marginTop = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function writeBottom(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        let maxWidth = canvas.width;\r\n        let marginTop;\r\n        ctx.font = 'bold 30px impact';\r\n        ctx.measureText(text).width > maxWidth ?\r\n            marginTop = canvas.height - getFontHeight(ctx.font)-10 :\r\n            marginTop = canvas.height - getFontHeight(ctx.font)+20\r\n        ctx.fillStyle = \"#FFF\";\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function getFontHeight(font) {\r\n        let parent = document.createElement(\"span\");\r\n        parent.appendChild(document.createTextNode(\"height\"));\r\n        document.body.appendChild(parent);\r\n        parent.style.cssText = \"font: \" + font + \"; white-space: nowrap; display: inline;\";\r\n        var height = parent.offsetHeight;\r\n        document.body.removeChild(parent);\r\n        return height;\r\n    }\r\n    function generate(){\r\n        setGenStatus(true)\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.clearRect(0,0,canvas.width,canvas.height)\r\n        let imm = document.getElementById('kart');\r\n        let rotate = imm.height / imm.width\r\n        imm.width = window.innerWidth\r\n        imm.height = window.innerWidth * rotate\r\n        ctx.drawImage(imm, 0, 0)\r\n        writeTop(top)\r\n        writeBottom(bottom)\r\n        setMemes(canvas.toDataURL(\"image/png\"))\r\n    }\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader left={<PanelHeaderBack onClick={()=>go('home')} />}>\r\n                Создание мема\r\n            </PanelHeader>\r\n            <img crossorigin={'anonymous'} id={'kart'} width={window.innerWidth} src={image}/>\r\n            <img width={window.innerWidth} src={memes} />\r\n            <canvas\r\n                style={{display: 'none'}}\r\n                ref={canvasRef}\r\n                width={img.width}\r\n                height={img.height || '300'}\r\n            />\r\n            {\r\n                top !== '' || bottom !== '' ?\r\n                    <React.Fragment>\r\n                        <Div style={{display: 'flex'}}>\r\n                            <Button before={<Icon24ShareOutline/>} size=\"l\" stretched style={{ marginRight: 8 }}>На стену</Button>\r\n                            <Button before={<Icon24LogoInstagram/>} size=\"l\" stretched>В историю</Button>\r\n                        </Div>\r\n                        <Div>\r\n                            <Button before={<Icon24Attachments/>} size=\"xl\">Сохранить в библиотеке</Button>\r\n                        </Div>\r\n                    </React.Fragment> :\r\n                    null\r\n            }\r\n            <FormLayout>\r\n                    <Input\r\n                        status={\r\n                            top.length>0 ?\r\n                                top.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={top.length+'/50'}\r\n                        top=\"Текст верхней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={top}\r\n                        onChange={e=>setTop(e.target.value)}/>\r\n                    <Input\r\n                        status={\r\n                            bottom.length>0 ?\r\n                                bottom.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={bottom.length+'/50'}\r\n                        top=\"Текст нижней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={bottom}\r\n                        onChange={e=>setBottom(e.target.value)}/>\r\n                        <Cell multiline>Обратите внимание: для корректного переноса строк между словами обязательно должны быть пробелы.</Cell>\r\n            </FormLayout>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Constructor;","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home'\nimport Constructor from './panels/Constructor'\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [img, setImg] = useState(null);\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(null); //<ScreenSpinner size='large' />\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = panel => {\n\t\tsetActivePanel(panel);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} setImg={setImg} />\n\t\t\t<Constructor id='constructor' fetchedUser={fetchedUser} go={go} image={img} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}