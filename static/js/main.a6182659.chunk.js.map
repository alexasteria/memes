{"version":3,"sources":["panels/Home.js","panels/Constructor.js","App.js","index.js"],"names":["Home","id","go","setImg","fetchedUser","useState","images","React","useRef","separator","map","image","index","key","style","padding","borderRadius","margin","size","onClick","height","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","Constructor","schema","Image","src","canvasRef","top","setTop","bottom","setBottom","setGenStatus","setMemes","fontH","setFontH","rotate","setRotate","getFontHeight","font","parent","document","createElement","appendChild","createTextNode","body","cssText","offsetHeight","removeChild","useEffect","canvas","current","ctx","getContext","clearRect","width","imm","getElementById","window","innerWidth","drawImage","text","fillStyle","lineHeight","maxWidth","marginTop","words","split","countWords","length","line","n","testLine","measureText","marginLeft","fillText","writeTop","writeBottom","toDataURL","generate","left","display","crossOrigin","ref","min","max","value","Number","onChange","status","placeholder","e","target","multiline","Fragment","before","stretched","marginRight","App","activePanel","setActivePanel","img","setUser","popout","setPopout","a","bridge","send","user","subscribe","detail","type","data","schemeAttribute","createAttribute","scheme","attributes","setNamedItem","fetchData","panel","ReactDOM","render"],"mappings":"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","file":"static/js/main.a6182659.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {PanelHeader, Panel, CardGrid, Card, Group, Button, Input} from \"@vkontakte/vkui\";\r\n\r\nconst Home = ({id, go, fetchedUser, setImg }) => {\r\n    const [images, setImages] = useState([\r\n        'https://sun9-56.userapi.com/baoxdsF_-He5F9NiEG9813iB6jspc3Pr2Vk3nQ/0R1ob9TJK2s.jpg',\r\n        'https://i.imgflip.com/1bij.jpg',\r\n        'https://sun9-34.userapi.com/Jb02ospH0-uzudorTg4yUWXDGg5CDtELMa68nA/XLgm_Xs8kZY.jpg',\r\n        'https://sun9-53.userapi.com/kQoYlGSpvfSLVN4AiaZu4Xsth4wR_44yU6-5xA/-3n8REtiI6A.jpg',\r\n        'https://sun9-10.userapi.com/pQprij-LTwwC7DWNoPI4CGXw3_wS70l6OtUyyg/nYpBF5bKJuY.jpg',\r\n        'https://sun9-46.userapi.com/JnFsdanmKshkCHetGmIN-93e2X4QK0zAhIBYNA/Brq-SJr-kgo.jpg',\r\n        'https://sun9-14.userapi.com/CNBgsxFXMRFS7UPJNyUfxKb_krOhqLrDc3sZtQ/-h_uYiLGLcA.jpg',\r\n        'https://sun9-16.userapi.com/hNxjkGka1jzBZJta9cG7smu0_25NzqR9l_WL9Q/CcS7f61M2GQ.jpg',\r\n        'https://sun9-44.userapi.com/jksvfHftzlSQJVEALaBeloaXc1Nmvaq8J6j6dA/mbG5LDMVkgI.jpg',\r\n        'https://sun9-63.userapi.com/3BcLZYSDoxeRqPtdrRmcTUjibcOdrqJSrhrB1g/gpOCU96uTm8.jpg'\r\n    ])\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState(null)\r\n    const [bottom, setBottom] = useState(null)\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader>\r\n                Мемчик\r\n            </PanelHeader>\r\n            <Group separator=\"hide\">\r\n                <CardGrid>\r\n                    {\r\n                        images.map((image, index)=>{\r\n                            return (\r\n                                <Card\r\n                                    key={index}\r\n                                    style={{padding: 2, borderRadius: 13, margin: 0}}\r\n                                    size=\"s\"\r\n                                    onClick={()=>{\r\n                                        setImg(image);\r\n                                        go('constructor')\r\n                                    }}\r\n                                >\r\n                                    <div style={{\r\n                                        height: 96,\r\n                                        backgroundImage: 'url(' + image + ')',\r\n                                        backgroundSize: 'cover',\r\n                                        backgroundPosition: 'center 35%',\r\n                                        backgroundRepeat: 'no-repeat',\r\n                                        borderRadius: 13\r\n                                    }} />\r\n                                </Card>\r\n                            )\r\n                        })\r\n                    }\r\n                </CardGrid>\r\n            </Group>\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect, useRef } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {PanelHeader, Panel, PanelHeaderBack, Cell\r\n    , Div, Button, Input, FormLayout, Slider} from \"@vkontakte/vkui\";\r\nimport Icon24LogoInstagram from '@vkontakte/icons/dist/24/logo_instagram';\r\nimport Icon24ShareOutline from '@vkontakte/icons/dist/24/share_outline';\r\nimport Icon24Attachments from '@vkontakte/icons/dist/24/attachments';\r\n\r\nconst Constructor = ({id, image, go}) => {\r\n    let schema = new Image()\r\n    schema.src = image\r\n    const [img, setImg] = useState(schema);\r\n    const canvasRef = React.useRef(null)\r\n    const [top, setTop] = useState('')\r\n    const [bottom, setBottom] = useState('')\r\n    const [genStatus, setGenStatus] = useState(false)\r\n    const [memes, setMemes] = useState(image)\r\n    const [fontH, setFontH] = useState(30)\r\n    const [rotate, setRotate] = useState(1)\r\n\r\n    useEffect(()=>{\r\n        generate()\r\n    })\r\n\r\n    useEffect(()=>{\r\n        let imm = document.getElementById('kart');\r\n        setRotate(imm.height / imm.width)\r\n        // const canvas = canvasRef.current\r\n        // const ctx = canvas.getContext('2d')\r\n        // let imm = document.getElementById('kart');\r\n        // let rotate = imm.height / imm.width\r\n        // imm.style.width = window.innerWidth\r\n        // imm.style.height = window.innerWidth * rotate\r\n        // console.log(imm)\r\n        // ctx.drawImage(imm, 0, 0)\r\n        //ctx.drawImage(img, 0, 0)\r\n    }, [])\r\n    function writeTop(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.fillStyle = \"#FFF\";\r\n        ctx.font = 'bold '+fontH+'px impact';\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let maxWidth = canvas.width;\r\n        let marginTop = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function writeBottom(text) {\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        let maxWidth = canvas.width;\r\n        let marginTop;\r\n        ctx.font = 'bold '+fontH+'px impact';\r\n        ctx.measureText(text).width > maxWidth ?\r\n            marginTop = canvas.height - getFontHeight(ctx.font)-10 :\r\n            marginTop = canvas.height - getFontHeight(ctx.font)+10\r\n        ctx.fillStyle = \"#FFF\";\r\n        let lineHeight = getFontHeight(ctx.font);\r\n        let words = text.split(\" \");\r\n        let countWords = words.length;\r\n        let line = \"\";\r\n        for (let n = 0; n < countWords; n++) {\r\n            let testLine = line + words[n] + \" \";\r\n            let testWidth = ctx.measureText(testLine).width;\r\n            if (testWidth > maxWidth) {\r\n                let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n                ctx.fillText(line, marginLeft, marginTop);\r\n                line = words[n] + \" \";\r\n                marginTop += lineHeight;\r\n            }\r\n            else {\r\n                line = testLine;\r\n            }\r\n        }\r\n        let marginLeft = ((canvas.width - ctx.measureText(line).width)/2)\r\n        ctx.fillText(line, marginLeft, marginTop);\r\n    }\r\n    function getFontHeight(font) {\r\n        let parent = document.createElement(\"span\");\r\n        parent.appendChild(document.createTextNode(\"height\"));\r\n        document.body.appendChild(parent);\r\n        parent.style.cssText = \"font: \" + font + \"; white-space: nowrap; display: inline;\";\r\n        var height = parent.offsetHeight;\r\n        document.body.removeChild(parent);\r\n        return height;\r\n    }\r\n    function generate(){\r\n        setGenStatus(true)\r\n        const canvas = canvasRef.current\r\n        const ctx = canvas.getContext('2d')\r\n        ctx.clearRect(0,0,canvas.width,canvas.height)\r\n        let imm = document.getElementById('kart');\r\n        let rotate = imm.height / imm.width\r\n        imm.style.width = window.innerWidth\r\n        imm.style.height = window.innerWidth * rotate\r\n        ctx.drawImage(imm, 0, 0, window.innerWidth, window.innerWidth * rotate)\r\n        writeTop(top)\r\n        writeBottom(bottom)\r\n        setMemes(canvas.toDataURL(\"image/png\"))\r\n    }\r\n\r\n    return (\r\n        <Panel id={id}>\r\n            <PanelHeader left={<PanelHeaderBack onClick={()=>go('home')} />}>\r\n                Создание мема\r\n            </PanelHeader>\r\n            <img style={{display: 'none'}} crossOrigin={'anonymous'} id={'kart'} src={image}/>\r\n            {/*<img width={window.innerWidth} height={image.height} src={memes} />*/}\r\n            <canvas\r\n                //style={{display: 'none'}}\r\n                ref={canvasRef}\r\n                width={window.innerWidth}\r\n                height={window.innerWidth * rotate || '300'}\r\n            />\r\n            <FormLayout>\r\n                <Slider\r\n                    min={10}\r\n                    max={100}\r\n                    value={Number(fontH)}\r\n                    onChange={fontH=>setFontH(fontH)}\r\n                    top=\"Размер шрифта\"\r\n                />\r\n                    <Input\r\n                        status={\r\n                            top.length>0 ?\r\n                                top.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={top.length+'/50'}\r\n                        top=\"Текст верхней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={top}\r\n                        onChange={e=>setTop(e.target.value)}/>\r\n                    <Input\r\n                        status={\r\n                            bottom.length>0 ?\r\n                                bottom.length < 50 ? 'valid' : 'error' :\r\n                                null\r\n                        }\r\n                        bottom={bottom.length+'/50'}\r\n                        top=\"Текст нижней строки\"\r\n                        placeholder={'Напишите, или оставьте поле пустым'}\r\n                        value={bottom}\r\n                        onChange={e=>setBottom(e.target.value)}/>\r\n                        <Cell multiline>Обратите внимание: для корректного переноса строк между словами обязательно должны быть пробелы.</Cell>\r\n            </FormLayout>\r\n            {\r\n                top !== '' || bottom !== '' ?\r\n                    <React.Fragment>\r\n                        <Div style={{display: 'flex'}}>\r\n                            <Button before={<Icon24ShareOutline/>} size=\"l\" stretched style={{ marginRight: 8 }}>На стену</Button>\r\n                            <Button before={<Icon24LogoInstagram/>} size=\"l\" stretched>В историю</Button>\r\n                        </Div>\r\n                        <Div>\r\n                            <Button before={<Icon24Attachments/>} size=\"xl\">Сохранить в библиотеке</Button>\r\n                        </Div>\r\n                    </React.Fragment> :\r\n                    null\r\n            }\r\n        </Panel>\r\n    );\r\n}\r\n\r\nexport default Constructor;","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home'\nimport Constructor from './panels/Constructor'\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [img, setImg] = useState(null);\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(null); //<ScreenSpinner size='large' />\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = panel => {\n\t\tsetActivePanel(panel);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} setImg={setImg} />\n\t\t\t<Constructor id='constructor' fetchedUser={fetchedUser} go={go} image={img} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}